
volumes:
  redis:
  minio:
  db:

services:
  # ----------------------------------------------
  db:
    image: postgres:14.6-alpine3.16
    volumes:
      - db:/var/lib/postgresql/data
      - ./db/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
    ports:
      - 5432:5432 # expose it for dev tools
    environment:
      # Note: the dbs are created when the container is created, not when the container is started
      POSTGRES_MULTIPLE_DATABASES : ${AUTH_DB}
      POSTGRES_USER               : ${DB_USER}
      POSTGRES_PASSWORD           : ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 20s
      timeout: 10s
      retries: 5
  # ----------------------------------------------
  redis:
    image: redis:6.2.6-alpine3.15
    volumes: 
      - redis:/data
  # ----------------------------------------------
  s3:
    image: docker.io/bitnami/minio:2024
    volumes:
      - minio:/bitnami/minio/data
    environment:
      MINIO_DEFAULT_BUCKETS : ${S3_BUCKET_NAME}
      MINIO_ROOT_USER       : ${S3_ADMIN} 
      MINIO_ROOT_PASSWORD   : ${S3_PASSWORD} 
  # ----------------------------------------------

  # auth:


  # front:
  #   build: 
  #     context: ./front  # where we should find dockerfile
  #     target : dev
  #   volumes:
  #     - ./front:/app
  #   ports:
  #     - 3000:3000
  #   stdin_open: true # docker run -i
  #   tty: true        # docker run -t
  #   entrypoint: ["sh", "-c", "yarn install && yarn start"]
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true

  # api:
  #   image: nginx:1.12-alpine
  #   volumes:
  #     - ./docker-compose.nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - front
  #     - back 
  #   ports:
  #     - "8050:8050"

  # # async:
  # #   image: centrifugo/centrifugo:v2.8

  # back:
  #   build:
  #     context: ./back
  #     target: dev
  #   depends_on:
  #     - db 
  #     - worker
  #   volumes:
  #     - ./back:/app
  #   ports:
  #     - 8000:8000
  #   entrypoint: [
  #     "sh", "-c", 
  #     "pip install -r requirements.txt && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  #     ]
  
  # worker:
  #   build: 
  #     context : ./back
  #     target  : dev 
  #   depends_on: 
  #     - db
  #     - rabbitmq
  #   volumes:
  #     - ./back:/app
  #   command: sh -c "pip install -r requirements.txt && celery -A main worker -l info"
   
  # # beat:
  # #   build:
  # #     context: ./back
  # #     target: dev
  # #   depends_on:
  # #     - db 
  # #   volumes:
  # #     - ./back:/app
  # #   ports:
  # #     - 8001:8001
  # #   entrypoint: [ "sh", "-c", "pip install -r requirements.txt && celery worker -A main -l info --concurrency=2" ]

  # flower:  
  #   command: sh -c "pip install -r requirements.txt && celery -A main flower --port=8888"
  #   depends_on: 
  #     - rabbitmq
  #   build: 
  #     context : ./back
  #     target  : dev 
  #   ports:  
  #     - 8888:8888 
  #   volumes:
  #     - ./back:/app

  # db:
  #   image: postgres:12.0-alpine
  #   environment:
  #     - POSTGRES_USER=project-template
  #     - POSTGRES_PASSWORD=123456
  #     - POSTGRES_DB=project-template

  # rabbitmq:
  #   image: rabbitmq:3.8-alpine
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=andrey
  #     - RABBITMQ_DEFAULT_PASS=123456
  #     - RABBITMQ_DEFAULT_VHOST=main
  # ----------------------------------------------
  nginx:
    image: nginx:1.25
    volumes:
      # nginx.conf.template will be processed by envsubst 
      # to replace the variables from the environment
      # the result will be saved in /etc/nginx/nginx.conf 
      - ./proxy/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
    ports:
      - 80:80
    depends_on:
      - s3
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
      DOMAIN_S3     : ${S3_DOMAIN}
  # ----------------------------------------------